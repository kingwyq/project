初始化git仓库：git init(该命令最好在一个新建目录里运行，表示将该目录变为git可以管理的仓库)。
添加文件到仓库：git add <filename>
提交文件到仓库:git commit -m '说明信息'，该命令会将所有add的文件全部提交。
git status查看工作区的状态，git diff查看修改的内容。
git log可以查看历史记录。
在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
把当前版本回退到上一个版本：git reset --hard HEAD^ ，此时本地文件已经是上一版本，此时用git log查看历史记录，发现回退之前的那个版本的历史修改记录已经
不见了，若要回到回退之前的办法是，找到以前的版本号 git reset --hard 1094a 这里采用版本号前几位就好，文件就回来了。如果找不到版本号怎么办，Git提供了一
个命令git reflog用来记录你的每一次命令。

Git和其他版本控制系统如SVN的一个不同之处就是有暂存区的概念。
工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。
前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：
第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。
你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
